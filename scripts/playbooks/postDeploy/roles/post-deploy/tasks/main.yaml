---
  - name: Wait for ssh
    wait_for_connection:

  - name: Wait for boot to complete
    ansible.builtin.wait_for:
      path: /var/lib/cloud/instance/boot-finished

  - name: Gathering facts
    setup:

  - name: Enable service NetworkManager
    ansible.builtin.service:
      name: NetworkManager
      enabled: yes
        
  - name: Populate service facts
    service_facts:

  - name: Restart network
    service:
      name: NetworkManager
      state: restarted

#  - name: Stop service firewalld, if started
#    ansible.builtin.service:
#      name: firewalld
#      state: stopped
#    when: "'firewalld' in services"
         
#  - name: Disable service firewalld
#    ansible.builtin.service:
#      name: firewalld
#      enabled: no
#    when: "'firewalld' in services"
         
  - name: Set network interface eth0
    template:
      src: ../artifacts/ethx.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ dev }}"
    vars:
      dev: eth0
      ipv4: "{{ parameter_defaults.edn_tenant_v4_fixed_ip }}"
      ipv4mask: "{{ parameter_defaults.edn_tenant_v4_Netmask }}"
      ipv4gw: "{{ parameter_defaults.edn_tenant_v4_GATEWAY }}"
      ipv6: "{{ parameter_defaults.edn_tenant_v6_fixed_ip }}"
      ipv6gw: "{{ parameter_defaults.edn_tenant_v6_IPV6_DEFAULTGW }}"
    when: parameter_defaults.edn_tenant_v4_fixed_ip is defined

  - name: Set network interface eth0
    template:
      src: ../artifacts/ethx.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ dev }}"
    vars:
      dev: eth0
      ipv6: "{{ parameter_defaults.edn_tenant_v6_fixed_ip }}"
      ipv6gw: "{{ parameter_defaults.edn_tenant_v6_IPV6_DEFAULTGW }}"
    when: parameter_defaults.edn_tenant_v4_fixed_ip is undefined


  - name: Set network interface eth1
    template:
      src: ../artifacts/ethx.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ dev }}"
    vars:
      dev: eth1
      ipv4: "{{ parameter_defaults.ssn1_tenant_v4_fixed_ip }}"
      ipv4mask: "{{ parameter_defaults.ssn1_tenant_v4_Netmask }}"
      ipv4gw: "{{ parameter_defaults.ssn1_tenant_v4_GATEWAY }}"
    when:
      - ('vnf_NIF'in group_names)


  - name: Set network interface eth2
    template:
      src: ../artifacts/ethx.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ dev }}"
    vars:
      dev: eth2
      ipv4: "{{ parameter_defaults.ssn2_tenant_v4_fixed_ip }}"
      ipv4mask: "{{ parameter_defaults.ssn2_tenant_v4_Netmask }}"
      ipv4gw: "{{ parameter_defaults.ssn2_tenant_v4_GATEWAY }}"
    when:
      - ('vnf_NIF'in group_names)


  - name: Set network interface eth3
    template:
      src: ../artifacts/ethx.j2
      dest: "/etc/sysconfig/network-scripts/ifcfg-{{ dev }}"
    vars:
      dev: eth3
      ipv6: "{{ parameter_defaults.ran_tenant_v6_fixed_ip }}"
      ipv6gw: "{{ parameter_defaults.ran_tenant_v6_IPV6_DEFAULTGW }}"
    when: 
      - "parameter_defaults.ran_tenant_v6_fixed_ip is defined"
      - ('vnf_NIF' in group_names)



  - name: Update IPv4 gateway
    lineinfile:
      dest=/etc/sysconfig/network
      line="GATEWAY={{ parameter_defaults.edn_tenant_v4_GATEWAY }}"
      regexp="^GATEWAY=.*"
      insertafter=EOF
      state=present
    when: parameter_defaults.edn_tenant_v4_fixed_ip is defined

  - name: Update IPv6 gateway
    lineinfile:
      dest=/etc/sysconfig/network
      line="IPV6_DEFAULTGW={{ parameter_defaults.edn_tenant_v6_IPV6_DEFAULTGW }}"
      regexp="^IPV6_DEFAULTGW=.*"
      insertafter=EOF
      state=present
    when: parameter_defaults.edn_tenant_v6_IPV6_DEFAULTGW is defined

  - name: Restart NetworkManager
    service:
      name: NetworkManager
      state: restarted
  
            
  - name: Configure sshd
    lineinfile:
      path: "/etc/ssh/sshd_config"
      regex: "^(#)?{{item.key}}"
      line: "{{item.key}} {{item.value}}"
      state: present
    loop:
      - { key: "ClientAliveInterval", value: "720" }
      - { key: "PasswordAuthentication", value: "yes" } 
    notify:
      - restart sshd

  - name: Get external vol device id
    set_fact:
      device_id1: "{{ item.value.links.ids[0] }}"
    with_dict: "{{ ansible_devices }}"
    when: 
      - "'vnf_RAID' in group_names or 'vnf_INT' in group_names"
      - "'virtio-' + parameter_defaults.volume_id1[:20] in item.value.links.ids"
  
  - name: Create ext4 filesystem on vol
    filesystem:
      fstype: ext4
      dev: "/dev/disk/by-id/{{ device_id1 }}"
    when: "'vnf_INT' in group_names or
          'vnf_RAID' in group_names"
        
  - name: Get external vol device id
    set_fact:
      device_id2: "{{ item.value.links.ids[0] }}"
    with_dict: "{{ ansible_devices }}"
    when: 
      - "'vnf_RAID' in group_names or 'vnf_INT' in group_names"
      - "'virtio-' + parameter_defaults.volume_id2[:20] in item.value.links.ids"

  - name: Create ext4 filesystem on vol
    filesystem:
      fstype: ext4
      dev: "/dev/disk/by-id/{{ device_id2 }}"
    when: "'vnf_INT' in group_names or
          'vnf_RAID' in group_names"


  - name: Get external vol device id
    set_fact:
      device_id3: "{{ item.value.links.ids[0] }}"
    with_dict: "{{ ansible_devices }}"
    when: 
      - ('vnf_INT' in group_names)
      - ('virtio-' + parameter_defaults.volume_id3[:20] in item.value.links.ids)
     

  - name: Create ext4 filesystem on vol
    filesystem:
      fstype: ext4
      dev: "/dev/disk/by-id/{{ device_id3 }}"
    when:
      - ('vnf_INT' in group_names)

  - name: Get external vol device id
    set_fact:
      device_id: "{{ item.value.links.ids[0] }}"
    with_dict: "{{ ansible_devices }}"
    when: 
      - "'vnf_APP' in group_names or 'vnf_MC' in group_names or 'vnf_NIF' in group_names or 'vnf_NFS' in group_names"
      - "'virtio-' + parameter_defaults.volume_id[:20] in item.value.links.ids"


#  - name: Get external vol device id
#    set_fact:
#      device_id: "{{ item.value.links.ids[0] }}"
#    with_dict: "{{ ansible_devices }}"
#    when:
#      - "'vnf_MC' in group_names or 'vnf_NIF' in group_names or 'vnf_NFS' in group_names"
#      - "'virtio-' + parameter_defaults.volume_id[:20] in item.value.links.ids"


#  - name: Get external vol device id
#    set_fact:
#      device_id: "{{ item.value.links.ids[0] }}"
#    with_dict: "{{ ansible_devices }}"
#    when:
#      - "'vnf_APP' in group_names"
#      - item.value.links.ids | select('search', 'virtio-' ~ parameter_defaults.volume_id[:17]) | list | length > 0


  - name: Create ext4 filesystem on vol
    filesystem:
      fstype: ext4
      dev: "/dev/disk/by-id/{{ device_id }}"
    when: "'vnf_APP' in group_names or
          'vnf_MC' in group_names or
          'vnf_NIF' in group_names or
          'vnf_NFS' in group_names"


  - name: Create directory /opt/engine/external/
    file:
      path: /opt/engine/external
      state: directory
      recurse: yes
    when: "'vnf_APP' in group_names or
          'vnf_MC' in group_names or
          'vnf_NIF' in group_names or
          'vnf_NFS' in group_names"


  - name: Mount /opt/engine/external/
    ansible.posix.mount:
      path: /opt/engine/external
      src: "/dev/disk/by-id/{{ device_id }}"
      state: mounted
      fstype: ext4
    when: "'vnf_APP' in group_names or
          'vnf_MC' in group_names or
          'vnf_NIF' in group_names or
          'vnf_NFS' in group_names"


  - name: Recursively change ownership
    file:
      path: /opt/engine/external
      state: directory
      recurse: yes
      owner: roamware
      group: roamware
    when: "'vnf_NFS' in group_names"
     

#  - name: Recursively change ownership
#    file:
#      path: /opt/engine/external
#      state: directory
#      recurse: yes
#      owner: eians
#      group: eians
#    when: "'vnf_NFS' in group_names"
  
  - name: Create directory /opt/engine/external[1 to 3]
    file:
      path: "{{ item }}"
      state: directory
      recurse: yes
    with_items:
      - /opt/engine/external1
      - /opt/engine/external2
      - /opt/engine/external3
    when:
      - ('vnf_INT' in group_names)

  - name: Mount /opt/engine/external[1 to 3]
    ansible.posix.mount:
      path: "{{ item.dest }}"
      src: "{{ item.src }}"
      state: mounted
      fstype: ext4
    loop:
      - src: "/dev/disk/by-id/{{ device_id1 }}"
        dest: /opt/engine/external1
      - src: "/dev/disk/by-id/{{ device_id2 }}"
        dest: /opt/engine/external2
      - src: "/dev/disk/by-id/{{ device_id3 }}"
        dest: /opt/engine/external3
    when:
      - ('vnf_INT' in group_names)

  - name: Create directory /opt/engine/raid/
    file:
      path: /opt/engine/raid
      state: directory
      recurse: yes
    when:
      - ('vnf_RAID' in group_names)
      
  - name: Mount /opt/engine/raid/
    ansible.posix.mount:
      path: /opt/engine/raid
      src: "/dev/disk/by-id/{{ device_id1 }}"
      state: mounted
      fstype: ext4
    when:
      - ('vnf_RAID' in group_names)

  - name: Create directory /var/lib/pgsql
    file:
      path: /var/lib/pgsql
      state: directory
      recurse: yes
    when:
      - ('vnf_RAID' in group_names)
              
  - name: Mount /opt/engine/raid/
    ansible.posix.mount:
      path: /var/lib/pgsql
      src: "/dev/disk/by-id/{{ device_id2 }}"
      state: mounted
      fstype: ext4
    when:
      - ('vnf_RAID' in group_names)

#  - name: Create application directory
#    become: yes
#    become_method: sudo
#    file:
#      path: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
#      state: directory
#    when:
#      - ('vnf_NFS' not in group_names)
#      - ('vnf_RAID' not in group_names)

  - name: Create application directory
    become: yes
    become_method: sudo
    file:
      path: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
      state: directory
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)


  - name: Compress VM instance Configuration Directory on server
    community.general.archive:
      path: /opt/engine/external/{{ parameter_defaults.name }}
      dest: /opt/engine/external/{{ parameter_defaults.name }}.tgz
    vars:
      ansible_ssh_user: '{{ nfs_user }}'
      ansible_ssh_pass: '{{ nfs_password }}'
    delegate_to: NFS01
    when: 
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)

  - name: Fetch compressed VM Configuration file from the Server
    fetch:
      src=/opt/engine/external/{{ parameter_defaults.name }}.tgz
      dest={{ parameter_defaults.name }}.tgz
      flat=yes
    remote_user: roamware
    vars:
      ansible_ssh_user: '{{ nfs_user }}'
      ansible_ssh_pass: '{{ nfs_password }}'
    delegate_to: NFS01
    when:
      - ('vnf_RAID' not in group_names)
      - ('vnf_NFS' not in group_names)


  - name: Remove compressed file from server
    file:
      path: /opt/engine/external/{{ parameter_defaults.name }}.tgz
      state: absent
    vars:
      ansible_ssh_user: '{{ nfs_user }}'
      ansible_ssh_pass: '{{ nfs_password }}'
    delegate_to: NFS01
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)


#  - name: Copy file to application directory
#    become: yes
#    become_method: sudo
#    copy:
#      src: "{{ parameter_defaults.name }}.tgz"
#      dest: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
#    when:
#      - ('vnf_NFS' not in group_names)
#      - ('vnf_RAID' not in group_names)


  - name: Copy file to application directory
    become: yes
    become_method: sudo
    copy:
      src: "{{ parameter_defaults.name }}.tgz"
      dest: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)

  - name: Extract {{ parameter_defaults.name }}.tgz into application directory
    ansible.builtin.unarchive:
      src: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}/{{ parameter_defaults.name }}.tgz"
      dest: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
      remote_src: yes
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)


  - name: Remove {{ parameter_defaults.name }}.tgz from application directory
    file:
      path: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}/{{ parameter_defaults.name }}.tgz"
      state: absent
    delegate_to: "{{ parameter_defaults.name }}"
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)


  - name: create a temp Directory 
    become: true
    become_user: root
    file:
      path: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}_temp"
      state: directory
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)

       
  - name: copy all the content to temp directory
    become: true
    become_method: sudo
    copy:
      src: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}/"
      dest: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}_temp"
      remote_src: yes
    when: 
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)


  - name: disable ipv6 
    ansible.posix.sysctl:
      name: "{{ item.name }}"
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
      sysctl_file: /etc/sysctl.conf
    loop:
    - name: net.ipv6.conf.default.disable_ipv6
      value: 0
    - name: net.ipv6.conf.all.disable_ipv6
      value: 0

  - name: Restart NetworkManager
    service:
      name: NetworkManager
      state: restarted


#  - name: Run user-settings script
#    become: true
#    become_user: root
#    shell: "bash /root/config_drive_{{ parameter_defaults.name[:-2] | lower }}/{{ parameter_defaults.name }}/user-settings.sh /root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
#    when: 
#      - ('vnf_NFS' not in group_names)
#      - ('vnf_RAID' not in group_names)

  - name: Run client setup script
    become: true
    become_user: root
    shell: "bash /root/eitools/ansible/ansible_client_setup.sh"
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)

#  - name: Run apply config script
#    become: true
#    become_user: root
#    shell: "bash /root/config_drive_{{ parameter_defaults.name[:-2] | lower }}/{{ parameter_defaults.name }}/apply_config_{{ parameter_defaults.name[:-2] | lower }}.sh"
#    when:
#      - ('vnf_NFS' not in group_names)
#      - ('vnf_RAID' not in group_names)


  - name: Set the hostname
    ansible.builtin.hostname:
      name: "{{ parameter_defaults.hostname }}"

  - name: Remove application directory
    become: true
    file:
      path: "/root/config_drive_{{ parameter_defaults.name[:-2] | lower }}"
      state: absent
    when:
      - ('vnf_NFS' not in group_names)
      - ('vnf_RAID' not in group_names)

